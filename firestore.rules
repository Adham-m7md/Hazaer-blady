rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules
    match /{document=**} {
      allow read, write: if false; // Deny by default
    }
    
    // User rules
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Cart subcollection rules
      match /cart/{itemId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      match /orders/{orderId} {
       allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
    }
    }
    
    // Product rules
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null && 
                    (request.resource.data.farmer_id == request.auth.uid || 
                     request.auth.token.email == 'ahmed.roma22@gmail.com');
      allow update, delete: if request.auth != null && 
                            (resource.data.farmer_id == request.auth.uid || 
                             request.auth.token.email == 'ahmed.roma22@gmail.com');
    }
    
    // Offer rules
    match /offers/{offerId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
                            (resource.data.farmer_id == request.auth.uid || 
                             request.auth.token.email == 'ahmed.roma22@gmail.com');
    }
    
    // Rating rules
    match /ratings/{ratingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                     request.resource.data.rater_user_id == request.auth.uid &&
                     request.resource.data.rated_user_id != request.auth.uid;
      allow update: if request.auth != null && 
                     resource.data.rater_user_id == request.auth.uid;
      allow delete: if request.auth != null && 
                     resource.data.rater_user_id == request.auth.uid;
    }
    match /notifications/{notificationId} {
   allow read: if true; // Adjust based on your needs
      allow write: if request.auth != null;
   }
  // Helper function for field updates
    function onlyFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
  }
}